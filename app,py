from flask import Flask, render_template, redirect, url_for, request, session ,flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from config import Config
from models import db, User ,TimesheetEntry
from datetime import datetime, timedelta
import time


from sqlalchemy import func



app = Flask(__name__)
app.config.from_object(Config)

db.init_app(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.session_protection = "strong"

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(user_id)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(EMSlogin=username, Password=password).first()
        if user:
            login_user(user)
            session.permanent = True
            app.permanent_session_lifetime = timedelta(minutes=5)
            return redirect(url_for('home'))
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/home')
@login_required
def home():
    # Pass user details to the template
    return render_template('home.html', 
                           employee_id=current_user.EmployeeID, 
                           fname=current_user.Fname, 
                           lname=current_user.Lname, 
                           team=current_user.Team, 
                           manager_name=current_user.ManagerName)
 

@app.route('/timesheet')
@login_required
def timesheet_home():
    # Check if the current user is a manager
    is_manager = current_user.is_manager()
    return render_template('timesheet_home.html', is_manager=is_manager)



@app.route('/fill_timesheet', methods=['GET'])
@login_required
def fill_timesheet():
    return render_template('fill_timesheet.html', user=current_user)

@app.route('/submit_timesheet', methods=['POST'])
@login_required
def submit_timesheet():
    # Retrieve form data
    employee_id = request.form['employee_id']
    fname = request.form['fname']
    lname = request.form['lname']
    team = request.form['team']
    manager_name = request.form['manager_name']
    dates = request.form['dates']  # Comma-separated string of dates
    duration_hours = int(request.form['duration_hours'])
    duration_minutes = int(request.form['duration_minutes'])
    total_time = float(request.form['total_time'])
    allocation_type = request.form['allocation_type']
    category_1 = request.form['category_1']
    category_2 = request.form.get('category_2', '')  # Optional
    category_3 = request.form.get('category_3', '')  # Optional
    comments = request.form['comments']
    project_code = request.form['project_code']


    # Initialize default values for billable and non-billable time
    billable_time =0
    nonbillable_admin_time = 0
    nonbillable_training_time = 0

    # Determine time based on allocation type and categories
    if allocation_type == 'Billable':
        billable_time = total_time
    elif allocation_type == 'Non-Billable':
        if category_1 == 'Admin':
            nonbillable_admin_time = total_time
        elif category_1 == 'Training':
            nonbillable_training_time = total_time

    # Logging for debugging purposes
    print(f"Billable Time: {billable_time}")
    print(f"Non-Billable Admin Time: {nonbillable_admin_time}")
    print(f"Non-Billable Training Time: {nonbillable_training_time}")

    # Split the selected dates and create entries for each date
    for date in dates.split(','):
        new_entry = TimesheetEntry(
            employee_id=employee_id,
            fname=fname,
            lname=lname,
            team=team,
            manager_name=manager_name,
            date=date.strip(),
            duration_hours=duration_hours,
            duration_minutes=duration_minutes,
            total_time=total_time,
            allocation_type=allocation_type,
            category_1=category_1,
            category_2=category_2,
            category_3=category_3,
            comments=comments,
            project_code=project_code,
            entry_timestamp=time.time() , # Current timestamp
            billable_time = billable_time,
            nonbillable_admin_time= nonbillable_admin_time,
            nonbillable_training_time=nonbillable_training_time


        )
        db.session.add(new_entry)

    db.session.commit()

    return redirect(url_for('timesheet_home'))


@app.route('/view_summary', methods=['GET'])
@login_required
def view_summary():
    # Get the date parameter or use the current date
    selected_date_str = request.args.get('date', datetime.today().strftime('%Y-%m-%d'))
    
    # Convert the string to a date object if needed
    selected_date = datetime.strptime(selected_date_str, '%Y-%m-%d').date()

    # Calculate the start and end dates for the week (Monday to Sunday)
    start_date = selected_date - timedelta(days=selected_date.weekday())  # Monday
    end_date = start_date + timedelta(days=6)  # Sunday

    # Query the database for timesheet entries for this week
    # No need to use strftime here, as the date field is already a DATE type
    entries = TimesheetEntry.query.filter(
        TimesheetEntry.date >= start_date,
        TimesheetEntry.date <= end_date,
        TimesheetEntry.employee_id == current_user.EmployeeID
    ).all()

    # Initialize the summary for all 7 days with default values of 0
    summary = {}
    for i in range(7):
        day = start_date + timedelta(days=i)
        summary[day] = {
            'billable_time': 0,
            'nonbillable_admin_time': 0,
            'nonbillable_training_time': 0,
            'unavailable_time': 0,
            'total_time': 0
        }

    # Add values from the database entries to the corresponding days in the summary
    for entry in entries:
        entry_date = entry.date  # Already a date object from the database
        summary[entry_date]['billable_time'] += entry.billable_time or 0
        summary[entry_date]['nonbillable_admin_time'] += entry.nonbillable_admin_time or 0
        summary[entry_date]['nonbillable_training_time'] += entry.nonbillable_training_time or 0
        summary[entry_date]['unavailable_time'] += entry.unavailable_time or 0
        summary[entry_date]['total_time'] += entry.total_time or 0

    # Calculate overall totals for the week
    overall_totals = {
        'billable_time': sum([day_data['billable_time'] for day_data in summary.values()]),
        'nonbillable_admin_time': sum([day_data['nonbillable_admin_time'] for day_data in summary.values()]),
        'nonbillable_training_time': sum([day_data['nonbillable_training_time'] for day_data in summary.values()]),
        'unavailable_time': sum([day_data['unavailable_time'] for day_data in summary.values()]),
        'total_time': sum([day_data['total_time'] for day_data in summary.values()])
    }

    return render_template('view_summary.html', summary=summary, overall_totals=overall_totals, start_date=start_date, end_date=end_date)


from datetime import timedelta

@app.route('/previous_week', methods=['GET'])
@login_required
def previous_week():
    selected_date = request.args.get('date', datetime.today().strftime('%Y-%m-%d'))
    selected_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
    previous_week_date = selected_date - timedelta(days=7)
    return redirect(url_for('view_summary', date=previous_week_date.strftime('%Y-%m-%d')))

@app.route('/next_week', methods=['GET'])
@login_required
def next_week():
    selected_date = request.args.get('date', datetime.today().strftime('%Y-%m-%d'))
    selected_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
    next_week_date = selected_date + timedelta(days=7)
    return redirect(url_for('view_summary', date=next_week_date.strftime('%Y-%m-%d')))



@app.route('/view_summary_by_date/<date>', methods=['GET'])
@login_required
def view_summary_by_date(date):
    entries = TimesheetEntry.query.filter_by(date=date, employee_id=current_user.EmployeeID).all()

    if not entries:
        flash("No entries found for this date.", "info")

    return render_template('view_entries.html', entries=entries, selected_date=date)



@app.route('/edit_entry/<int:entry_id>', methods=['GET', 'POST'])
@login_required
def edit_entry(entry_id):
    # Fetch the entry by ID from the database
    entry = TimesheetEntry.query.get_or_404(entry_id)
    
    if request.method == 'POST':
        try:
            # Get form data from the request
            entry.date = request.form['date']
            entry.duration_hours = int(request.form['duration_hours'])
            entry.duration_minutes = int(request.form['duration_minutes'])
            entry.total_time = float(request.form['total_time'])
            entry.allocation_type = request.form['allocation_type']
            entry.category_1 = request.form['category_1']
            entry.category_2 = request.form['category_2']
            entry.category_3 = request.form['category_3']
            entry.comments = request.form['comments']
            entry.project_code = request.form['project_code']
            
            # Save the updated entry back to the database
            db.session.commit()
            flash('Timesheet entry updated successfully!', 'success')
            return redirect(url_for('view_summary_by_date', date=entry.date))

        except Exception as e:
            db.session.rollback()  # In case of an error, rollback the changes
            flash(f'Error updating entry: {str(e)}', 'error')
    
    # Render the edit form with the existing entry details
    return render_template('edit_entry.html', entry=entry)



@app.route('/delete_entry/<int:entry_id>', methods=['POST'])
@login_required
def delete_entry(entry_id):
    entry = TimesheetEntry.query.get(entry_id)
    
    if entry:
        db.session.delete(entry)
        db.session.commit()
        flash('Entry deleted successfully', 'success')
    else:
        flash('Entry not found', 'error')
    
    return redirect(url_for('view_summary_by_date', date=entry.date))


if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Create tables if they don't exist
    app.run(debug=True)
